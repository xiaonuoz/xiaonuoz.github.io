<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mysql on 笑傩</title>
        <link>https://xiaonuoz.github.io/categories/mysql/</link>
        <description>Recent content in mysql on 笑傩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 20 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xiaonuoz.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>MySQL基础</title>
        <link>https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h2 id=&#34;常用语句&#34;&gt;常用语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;show tables from databases;&lt;/code&gt;  查看某个库中的某个表&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select database();&lt;/code&gt;  查看当前所在库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;desc tableName;&lt;/code&gt;  查看表的结构&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select version();&lt;/code&gt;  查看MySQL的版本&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT last_name as “别名” from employees;&lt;/code&gt; 为字段起别名，as可以省略，空格区分即可。双引号也可省略&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT DISTINCT id FROM users&lt;/code&gt; 		distinct&amp;ndash;&amp;gt;  对查询出的数据进行&lt;strong&gt;去重，当对多个字段去重时 &lt;code&gt;DISTINCT a,b&lt;/code&gt;，它会将多个字段视为一个整体，当同时满足的时候就会去重。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mysql中的加号只能作为运算符，无法拼接字符串，如果是字符型相加，会尝试将其转换成整型，转换失败则会让字符型转为数值 0，只要其中一方为null，其结果肯定为null&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT CONCAT(last_name,&amp;quot; &amp;quot;,first_name) 姓名 FROM employees&lt;/code&gt; 拼接字段，并为拼接后的字段起别名为姓名&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IFNULL(expr1,expr2)&lt;/code&gt; 判断expr1的值是否为null，为null时把null改为expr2的值&lt;/p&gt;
&lt;p&gt;当有三个条件，可以通过（）来进行细分，如查询编号小于90或大于110或工资大于15000的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from employees where NOT(id&amp;gt;=90 AND id&amp;lt;=110) OR salary&amp;gt;15000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;模糊查询，&lt;code&gt;like(像)、between and(在什么之间)、in、is null、is not null&lt;/code&gt;。like通常和通配符搭配使用，%表示任意多个字符，包含0个字符；_下划线表示任意单个字符；&lt;/p&gt;
&lt;p&gt;如果查询内容中有特殊字符，如下划线百分号等，可以只用反斜杠 &lt;code&gt;\&lt;/code&gt; 进行转译,可以在语句最后用 &lt;code&gt;ESCAPE&lt;/code&gt;定义转译字符&lt;/p&gt;
&lt;p&gt;between and表示区间，&lt;code&gt;id between 100 and 120&lt;/code&gt; 取id在100到120之间,&lt;strong&gt;且包含100和120，临界值不要颠倒，前面是大于后面是小于，颠倒后语意会发生改变。也可以通过 &lt;code&gt;NOT BETWEEN AND &lt;/code&gt;来取反&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;in用于判断某字段的值是否属于in列表的某一项，&lt;code&gt;id in(10,20,30)&lt;/code&gt;取id是10或20或30的数据，不能使用通配符，因为通配符是和like一起使用，in等价于等号=&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is null&lt;/code&gt; 和 &lt;code&gt;is not null&lt;/code&gt;用于判断字段值是否为NULL，因为=和&amp;lt;&amp;gt;不能判断null值&lt;/p&gt;
&lt;p&gt;排序语法：&lt;code&gt;select * from table [wherer 条件] order by 排序列表 [asc|desc]&lt;/code&gt; 默认为升序asc，可省略。也可以对表达式进行排序且起别名，&lt;code&gt;select *,salary*12*(1+IFNULL(commission,0)) AS 年薪 from table [wherer 条件] order by 年薪 [asc|desc]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from employees order by salary asc,employees_id desc&lt;/code&gt; &lt;strong&gt;先根据工资升序排列，当遇见工资相同时，按id降序排列，order by一般放在查询语句最后面，limit语句除外&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语句的执行顺序一般是先执行form ，[有分组或者连接则先进行]，然后where筛选数据，然后才是select后要显示的字段，最后升序降序有定义则执行，因此如果有分组，select显示的是筛选之后需要显示的字段，并非原始表的字段&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;函数&#34;&gt;函数&lt;/h2&gt;
&lt;h3 id=&#34;字符函数&#34;&gt;字符函数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;upper 将字符串转为大写&lt;/code&gt;，&lt;code&gt;lower  将字符串转为小写&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;substr|substring(str,index,[长度])&lt;/code&gt; 两者都可用，用于切割字符串，要注意的是索引是从1开始。加长度则是截取从指定索引处开始的指定字符长度的&lt;strong&gt;字符（即使是中文也依然只占一个字符）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;instr(str,substr)&lt;/code&gt; 用于返回子串substr在str中&lt;strong&gt;第一次出现&lt;/strong&gt;的起始索引，找不到则返回0&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trim( [i FORM] str)&lt;/code&gt;  去掉字符串前后的空格或者指定字符串 i&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LPAD(str,len ,&#39;*&#39;) &lt;/code&gt; 用指定的字符实现左填充指定长度，将str的头部用星号*填充到 len 个长度，长度包括str本身的&lt;strong&gt;字符长度（注意是字符不是字节，字符无论中英文都是只占一个字节），但是如果len&amp;lt;str，它会进行截断（从右边开始截断）, &lt;code&gt;rpad(str,len,&#39;*&#39;)&lt;/code&gt;则是右填充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replace(str,form_str,to_str)&lt;/code&gt;，替换，将str中的form_str替换成to_str，如果有多个相同的字符则会全部替换&lt;/p&gt;
&lt;h3 id=&#34;数学函数&#34;&gt;数学函数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;round(X,[D])&lt;/code&gt; 四舍五入，X为要计算的值，D为保留小数点后几位（以小数点X+1的位数进行四舍五入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CEIL(X)&lt;/code&gt; 向上取整，返回&amp;gt;=该参数的最小整数（如1.00则取1，1.01则取2）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FLOOR(X) &lt;/code&gt;向下取整，返回&amp;lt;=该参数的最大整数（如1.00则取1，1.99也取1）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TRUNCATE(X,D)&lt;/code&gt; 表示截断，小数点后保留几位，X为原始值，D为保留的位数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MOD(m,n)&lt;/code&gt;  取余，a&amp;gt;=b,可以套用公式  &lt;code&gt;a-a/b*b&lt;/code&gt; 进行计算，因为数据库中除法只取整，所以计算结果不一定为0&lt;/p&gt;
&lt;h3 id=&#34;时间函数&#34;&gt;时间函数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;NOW()&lt;/code&gt; 返回当前系统日期+时间；&lt;code&gt;CURDATE()&lt;/code&gt; 返回当前系统日期，不包含时间；&lt;code&gt;CURTIME()&lt;/code&gt; 返回当前系统时间，不包含日期&lt;/p&gt;
&lt;p&gt;也可以获取指定的部分，年月日时分秒都可以单独获取，&lt;code&gt;YEAR|MONTH|DAY...(时间格式)&lt;/code&gt;，在之后加上name,&lt;code&gt;monthname&lt;/code&gt; 则可获取英文月份&lt;/p&gt;
&lt;p&gt;&lt;code&gt;str_to_date(&#39;9-3-2019&#39;,&#39;%m-%d-%Y&#39;)&lt;/code&gt; 将日期格式的字符转换成&lt;strong&gt;真正的日期型数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;date_format(date,&#39;%m月/%d日 %Y年&#39;)&lt;/code&gt; 将日期格式date转换成字符，同时可以自定义字符的输出格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;datediff(date1,date2)&lt;/code&gt; 返回日期参数的相差天数，由date1减date2&lt;/p&gt;
&lt;h3 id=&#34;流程控制函数&#34;&gt;流程控制函数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;select if(expr1,expr2,expr3) &lt;/code&gt; expr1表示条件表达式，为true时返回表达式2的值，为false返回表达式3的值&lt;/p&gt;
&lt;p&gt;case语句即可以搭配select（只能返回值），也可以单独自己使用（返回值或语句）。&lt;strong&gt;当显示值的时候不要放分号，一放分号就表示结束了。else可以省略。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;只有then后是语句时才会加分号！！！
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;用法1（类似于switch）：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;case 要判断的字段或表达式
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;when 常量1 then 要显示的值1或  [语句1;]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;when 常量2 then 要显示的值2或  [语句2;]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;else 要显示的默认值或语句;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;用法2（类似与多重判断，else if）,case后面不加变量:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;case 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;when 条件1 then 要显示的值1或  [语句1;]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;when 条件2 then 要显示的值2或  [语句2;]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;else 要显示的值n或  [语句n;]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;end
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果是作为独立语句放在BEGIN END中时，then后面只能接语句，且end后面要加case;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;分组函数将多个值通过计算后获取一个值&#34;&gt;分组函数，将多个值通过计算后获取一个值&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sum(列名)&lt;/code&gt; 统计该列的和；&lt;code&gt;avg(列名)&lt;/code&gt; 统计该列的平均值；&lt;code&gt;min(列名)&lt;/code&gt; 统计该列的最低值；&lt;code&gt;max(列名)&lt;/code&gt; 统计该列的最大值；&lt;code&gt;count(列名)&lt;/code&gt; 统计该列的&lt;strong&gt;不为空null的值&lt;/strong&gt;的个数；&lt;/p&gt;
&lt;p&gt;sum和avg只支持数值型，min、max、count可以处理任何类型。&lt;strong&gt;分组函数都忽略了null值，含有null的字段数据是不会参加计算的。null加 任何值其结果都为null&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分组函数可以搭配distinct（去重）使用，&lt;code&gt;sum(distinct salary)&lt;/code&gt; 它会先对数据进行去重，然后进行计算&lt;/p&gt;
&lt;p&gt;&lt;code&gt;count(*)&lt;/code&gt;表示统计所有行数，因为只要该行有一个字段不为NULL就会加上那一行，主键永远不会为空&lt;/p&gt;
&lt;p&gt;和分组函数一同查询的字段要求是group by后的字段，如果顺带查询一个普通字段，就对不上（一个对多个普通字段，无论显示什么都是没有意义的）&lt;/p&gt;
&lt;h2 id=&#34;分组查询&#34;&gt;分组查询&lt;/h2&gt;
&lt;h3 id=&#34;以基础字段进行分组&#34;&gt;以基础字段进行分组&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;salary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;employees&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;以什么字段进行分组就要最后用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;进行注明以什么分组，分组的含义就是将该字段中相同的数据划分为一个组，通常用于以该字段进行划组来计算其他字段的数值。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;后&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;字段可以省去，不加则查询出来的数据不会显示&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;一栏，它是进行过分组之后的每个组的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，重复的被合并为了一个。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;分组查询是不能使用&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;号取所有字段的，因为分组是将原始字段筛选，而显示其他字段时，不进行计算则无法知道该显示什么数据&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;当描述为每个部门，每个班级等就可以用分组查询&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;con&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;department_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;employees&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;department_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;HAVING&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;con&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;查询哪个部门员工个数大于&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对查询出来的分组数据进行筛选时不能使用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;作用于分组之前，想要对分组之后的数据进行筛选则需要使用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Having&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;原始表就有的数据用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;进行筛选，分组后的数据用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;having&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;进行筛选&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;分组函数做分组查询的条件时，肯定是放在having之后（因为分组函数已经是对原始表分组后的数据进行计算过了，不属于原始数据了）。出于对性能的考虑，如果是筛选条件是分组的那个字段时，将它放在where中（也属于原始数据）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般如果没有分组的情况下，使用where即可。having只在分组情况下使用&lt;/p&gt;
&lt;p&gt;也可以按多个字段分组，当定义的字段全部都一致时才会分为一个组&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select avg(salary),de_id,job_id from emp group by de_id,job_id&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;以表达式或函数分组&#34;&gt;以表达式或函数分组&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;employees&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LENGTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;HAVING&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;多表查询&#34;&gt;多表查询&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;连接是对两表数据进行组装，如果A表的一条数据在B组中满足多个设定的where条件，那么它就会组装多个数据。每一个条件或连接都会形成一个虚拟表，然后一步步的进行筛选最后得出正确结果。无论内连还是外连都会先生成一个笛卡尔乘积的表，然后再通过条件过滤出符合的数据&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;内连接查询两表的交集&#34;&gt;内连接（查询两表的交集）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SELECT 查询字段
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM 表1 别名 INNER JOIN 表2 别名
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ON 连接条件;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//INNER可以省略
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;等值连接&#34;&gt;等值连接&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;select boyname,b.girlname form boys as b INNER JOIN girls as g ON b.id=g.boys_id&lt;/code&gt; 查询两个表中的数据，当两表某字段相等时显示对应行的值，一个表中有另一个没有则不会被筛选出来。最后结果肯定是  0&amp;lt;=数据&amp;lt;=两表行的乘积(m*n)，即其中的某个表的字段可能会重复显示。两表都有的字段加上前缀声明用哪个表，避免歧义 出现报错&lt;/p&gt;
&lt;p&gt;如果为表起了别名，则查询的字段就不能用原来的表名去限定了&lt;/p&gt;
&lt;p&gt;也可以对连接后的数据进行分组和筛选&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select count(*),city from de INNER JOIN city ON de.id=city_id group by city&lt;/code&gt; 先对选择的表进行连接，然后分组，然后统计数量&lt;/p&gt;
&lt;h4 id=&#34;非等值连接&#34;&gt;非等值连接&lt;/h4&gt;
&lt;p&gt;即连接的符号不是等于，&lt;code&gt;select salary,grade_lv from em INNER JOIN job_grade ON salary between g.&#39;min_salary&#39; AND g.&#39;max_salary&#39; &lt;/code&gt;，它表示查询工资和工资等级表，并且筛选出工资在某个区间的数据，比如工资等级表有ABCD四个等级，salary表的每一条数据都会和工资等级表中的每个数据进行判断，当符合条件则将两者合成一条临时数据，然后再进行下一个字段的判断。最后出现的数据就是  每个员工的工资都会分到一个专属的等级，如2000分到D级（1000-2000）&lt;/p&gt;
&lt;h4 id=&#34;自连接&#34;&gt;自连接&lt;/h4&gt;
&lt;p&gt;对一张表进行连接筛选数据，比如员工表所对应的领导id也在员工表中，则需要自连接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select e.last_name 员工名,m.last_name 领导名 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;from employees e INNER JOIN employees m 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ON e.employee_id=m.manager_id
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;它将两张相同的表合在一起，然后进行判断，如果判断成功则合为一条，再进行判断，最后只取出员工名和领导名&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这三种连接也可以适用于超过两个表的情况&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select last_name,department_name,city from 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;employees e INNER JOIN departments d ON e.department_id=d.department_id 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INNER JOIN locations l  on d.location_id=l.location_id
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;表之间必须要有关联，有主外键关系。且不能把两个关联条件用AND放一起，虽然不报错，但是是有问题的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三表及以上的连接需要考虑顺序，因为是表1和表2连成一个大表，然后on条件之后，连成的大表再和表3进行连接。且如果表1和表3没主外键关系就连接不起来，只有表1和表2，然后表2和表3&lt;/p&gt;
&lt;h3 id=&#34;外连接查询一个表有另一个表没有的数据&#34;&gt;外连接（查询一个表有，另一个表没有的数据）&lt;/h3&gt;
&lt;p&gt;外连接是区分主从表的，连接之后两者根据条件匹配，&lt;strong&gt;匹配成功时数据会显示出来。当匹配不到时，其值则为NULL。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以外连接查询的结果为主表中的所有记录，结果分两部分，一部分从表有数据（类似于内连接），另一部分从表数据为NULL&lt;/p&gt;
&lt;p&gt;**当为左外连接时，left join左边的是主表；当为右外连接时，right join右边的是主表。**即左外交换顺序则可达到右外同样的效果。要查询的信息主要来自哪个表，哪个表就当主表。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select b.name from beauty b 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	left join boys bo on b.boyfriend_id=bo.id 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	where bo.id IS NULL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;对查询结果进行判断是否为NULL来取出不是交集的值时，最好是对从键的主键进行判断，因为其他值可能正常情况下也会为NULL，只有主键永远不会为空，为空就是外连接没匹配到的那部分数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mysql不支持全外连接，全外连接就是内连接+表1有但是表2没有的+表2有但是表1没有的  数据&lt;/p&gt;
&lt;p&gt;交叉连接就是笛卡尔乘积现象，表1的数据乘以表2的数据，关键字是CROSS JOIN ，没顺序之分&lt;/p&gt;
&lt;h2 id=&#34;子查询&#34;&gt;子查询&lt;/h2&gt;
&lt;p&gt;出现在其他语句中（不仅仅是select语句，其他语句也可以使用子查询）的select语句，称为子查询或内查询；内部嵌套其他select语句的查询，称为外查询或主查询&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3.png&#34;
	width=&#34;1098&#34;
	height=&#34;268&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;983px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;标量子查询&#34;&gt;标量子查询&lt;/h3&gt;
&lt;p&gt;标量子查询一般搭配着单行操作符使用，&amp;gt; &amp;lt; &amp;gt;=  &amp;lt;=  = &amp;lt;&amp;gt; ；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;employees&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;salary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;salary&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;employees&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Abel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;也可以搭配分组使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SELECT MIN(salary) minsalary FROM employees 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GROUP BY department_id 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HAVING minsalary&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	(SELECT MIN(salary) FROM employees where department_id=50)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//在标量子查询中（有大于等于判断），子查询的结果必须只有一行。不可以查出多行，会产生报错。因为大于等于之类的判断无法同时判断多个值（需要in）
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;子查询的执行是优先于主查询执行的，因为主查询的条件用到了子查询的结果&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;多列子查询&#34;&gt;多列子查询&lt;/h3&gt;
&lt;p&gt;列子查询一般搭配着多行操作符使用，in  、any/some 、 all。&lt;/p&gt;
&lt;p&gt;**in /not in 等于查询的条件是子查询结果列表中的任意一个；**ANY/SOME 是和子查询返回的任意某一个值比较（如果是小于任意一个，则是小于最大的那个就行，用max()更合适，可读性更高）；ALL是和子查询返回的所有值进行比较（小于所有值则是小于最小值）。&lt;/p&gt;
&lt;h3 id=&#34;行子查询&#34;&gt;行子查询&lt;/h3&gt;
&lt;p&gt;结果集一行多列或多行多列&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SELECT * FROM employees
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WHERE (employees_id,salary)=(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	SELECT MIN(employees_id),MAX(salary) FROM employees
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;放select后面的子查询&#34;&gt;放select后面的子查询&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;查询每个部门中的人数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select d.*, 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	select count(*) from employees e WHERE d.department_id=e.department_id
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)	个数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM departments d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这种方法仅仅支持标量子查询，即子查询返回的值只能是一行一列&lt;/p&gt;
&lt;h3 id=&#34;放在from后面的子查询&#34;&gt;放在from后面的子查询&lt;/h3&gt;
&lt;p&gt;将子查询充当成一张表。子查询必须起别名，不然找不到。也可以搭配内外连接，这相当于一个新的表，里面的字段就是查询出来的字段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查询每个部门的平均工资的工资等级
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SELECT ag_dep.*,job_grades.grade_level
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(select AVG(salary) ag ,department_id from employees GROUP BY department_id) ag_dep 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INNER JOIN job_grades ON ag_dep.ag BETWEEN lowest_sal AND highest_sal
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;放在exists后面相关子查询&#34;&gt;放在exists后面（相关子查询）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;exists(完整的查询语句)&lt;/code&gt; 用于判断后面的子查询是否有值，返回一个布尔类型，有就是 1。无论结果有多少，它只会返回一个0或者1 [单行单列]，用exists可以实现的用in也能实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查询有员工的部门名
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select department_name FROM departments d where EXISTS(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	select * from employees e where d.department_id=e.department_id
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查询都是一条一条执行，一条一条显示的，因此当主表查出一条数据，然后拿主表的某个字段和从表进行判断。判断失败则会不显示，放select  from  exists where后面都是如此，甚至其他查询也是如此。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;分页查询&#34;&gt;分页查询&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select 查询列表 from 表 limit offset,size;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;limit是偏移量，排除从头开始共limit条数据，显示显示size条数据.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;limit语句放在查询语句的最后&lt;/p&gt;
&lt;h2 id=&#34;联合查询&#34;&gt;联合查询&lt;/h2&gt;
&lt;p&gt;当查询的结果来自多个表，且表之间没有直接连接关系，但查询的结果列数一致时,可以用联合查询将多个独立的查询的结果合并成一个结果（并集）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select id,name from employees wherer email like &amp;#39;%a%&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;UNION
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select uid,uname from user wherer uid&amp;gt;90
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;UNION
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最后表名为最开始的查询字段名，即id,name；uid和uname不会进行显示。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;1.要求多条查询语句的查询列数要一致&lt;/p&gt;
&lt;p&gt;2.要求多条查询语句的查询的每一列的类型和顺序最好一致（id对uid，name对uname）&lt;/p&gt;
&lt;p&gt;3.UNION关键字会默认去重（即表之间查询出的语句有相同的行内容），&lt;strong&gt;如果不想去重则需要使用 &lt;code&gt;UNION ALL&lt;/code&gt;来包含重复项&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;新增数据&#34;&gt;新增数据&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;insert into 表名（列名） values(值...),(值....)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;列和值要一一对应，省略列名时值要和表中列一一对应。此方法支持插入多行，
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;此方法也支持子查询插入(将查询出来的结果集插入到表中，不需要加values关键字)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;insert into 表名（列名） select id,name,age from user
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;也可以通过
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;insert into 表名
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;set id=1,name=&amp;#34;xx&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;来实现新增时只给指定值进行赋值，其他值为默认值，不支持插入多行和子查询
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;修改数据&#34;&gt;修改数据&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;update 表名 set 列=新值,列=新值...  where 条件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;一定要加条件，否则是将这个表中所有数据对应的列数据进行修改
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;update也可以进行连接来修改多个表的记录（了解即可）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;update 表名 别名
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;inner|left|right join 表2 别名 on 条件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;set 表1.列名=值，表2.列名=值
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;where 表1.列名=条件 and 表2.列名=条件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;update user u inner join admin a on u.id=a.uid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;set u.name=&amp;#39;admin&amp;#39;,a.type=&amp;#39;success&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;where u.id=1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;这样就可以实现对user表中id为1的name列和admin表中uid为1的type列进行修改
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除数据&#34;&gt;删除数据&lt;/h2&gt;
&lt;p&gt;删除单行数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;delete from 表名 where 条件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;不加条件则把表中数据全部删除
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;删除多行数据（了解即可）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;delete 要删除的表的别名
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;from 表1 别名 join 表2 别名 on 连接条件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;where 筛选条件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;TRUNCATE TABLE 表名 &lt;/code&gt;清空数据，将表中数据全部删除，这个删除不允许加where，只能删除全部。&lt;/p&gt;
&lt;p&gt;DELETE删除后自增长列的值从断点开始，而TRUNCATE自增长列重新从1开始&lt;/p&gt;
&lt;p&gt;当涉及事务时，DELETE删除可以回滚，而TRUNCATE不能回滚，所以尽量少使用TRUNCATE&lt;/p&gt;
&lt;h2 id=&#34;ddl对库和表的操作&#34;&gt;DDL对库和表的操作&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CREATE DATABASE [IF NOT EXISTS] 库名&lt;/code&gt; ，&lt;code&gt;IF NOT EXISTS&lt;/code&gt; 表示如果库不存在则创建库，存在则警告，不会报错。IF EXISTS则相反意义&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ALTER DATABASE 库名 SET CHARACTER SET gbk &lt;/code&gt; 更改库的编码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DROP DATABASE 库名&lt;/code&gt; 删除库&lt;/p&gt;
&lt;h3 id=&#34;表的操作&#34;&gt;表的操作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DESC 表名&lt;/code&gt; 查看表结构&lt;/p&gt;
&lt;p&gt;创建表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;create table 表名(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	列名 列的类型[(长度) 约束],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	列名 列的类型[(长度) 约束],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	列名 列的类型[(长度) 约束]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;修改表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ALTER TABLE 表名 CHANGE COLUMN 旧列名 新列名 新列名的类型     //修改列名，COLUMN可省略，其他操作不能省略，建议都加上
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ALTER TABLE 表名 MODIFY COLUMN 列名 新类型 新约束    //修改列的类型或约束,不加约束则是将原有约束全删除
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ALTER TABLE 表名 ADD COLUMN 列名 列类型 [first|after 字段名]   //添加新的列（可以指定在第一行或某行之后，默认是添加到最后）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ALTER TABLE 表名 DROP COLUMN 列名    //删除列
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ALTER TABLE 表名 RENAME TO 新表名    //修改表名
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;DROP TABLE [IF EXISTS] 表名&lt;/code&gt; 删除表,IF EXITS仅仅适用于库和表&lt;/p&gt;
&lt;p&gt;复制表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CREATE TABLE copy_table LIKE table    //仅仅复制表的结构
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CREATE TABLE copy SELECT * FROM table    //复制table表的结构+数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CREATE TABLE copy SELECT id,name FROM table where nation=&amp;#39;中国&amp;#39;   //复制部分结构和部分数据，可以设置where 1=2来复制部分结构不复制数据
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;数据库数据类型&#34;&gt;数据库数据类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3.png&#34;
	width=&#34;1098&#34;
	height=&#34;268&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;983px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-5.png&#34;
	width=&#34;1021&#34;
	height=&#34;592&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-5_hu0975da8609c8ce25dd9d017f0b32e10d_302102_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-5_hu0975da8609c8ce25dd9d017f0b32e10d_302102_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;413px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;浮点型如果小数位超出，则会四舍五入显示最大长度的值，如类型 &lt;code&gt;(2,1)&lt;/code&gt; 的1.26显示为1.3。而定点型则是直接截断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字符型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8.png&#34;
	width=&#34;1401&#34;
	height=&#34;430&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;325&#34;
		data-flex-basis=&#34;781px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;enum类型：&lt;/p&gt;
&lt;p&gt;枚举类型，要求插入的值必须属于列表中的指定的值。忽略大小写。&lt;code&gt;c1 ENUM(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;set类型：&lt;/p&gt;
&lt;p&gt;集合类型，和ENUM类型类似，最大的区别是集合可以对于一个插入选取多个成员，而ENUM只能选一个。如 &lt;code&gt;s1 SET(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)&lt;/code&gt;，它可以插入VALUES(&amp;lsquo;a,b&amp;rsquo;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;对于TIMESTAMP，它把客户端插入的时间从当前时区转化为UTC（世界标准时间）进行存储。查询时，将其又转化为客户端当前时区进行返回。&lt;/p&gt;
&lt;p&gt;而对于DATETIME，不做任何改变，基本上是原样输入和输出。&lt;/p&gt;
&lt;p&gt;TIMESTAMP和DATETIME除了存储范围和存储方式不一样，没有太大区别。&lt;strong&gt;当然，对于跨时区的业务，TIMESTAMP更为合适。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;约束&#34;&gt;约束&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;UNIQUE：唯一可为空，用于保证该字段的值具有唯一性，但可以为空（只能有一个值为null,因为两个null就重复了，违反了唯一的性质【版本不同可以会可以存在多个NULL】），primary key是唯一且不能为空&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主键有且只有一个，唯一约束可以有多个&lt;/p&gt;
&lt;p&gt;FOREIGN KEY：外键约束 ，用于限制两表的关系，保证该字段的值必须来自于主表的关联列的值。在从表添加外键约束，用于引用主表中某列的值。&lt;strong&gt;在创建表时使用外键约束是无效的，只有在修改时有用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CHECK检查约束在mysql中无效&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SHOW INDEX FROM 表名&lt;/code&gt; 查看stuinfo表中的所有索引，包括主键、外键、唯一和自己创建的索引&lt;/p&gt;
&lt;p&gt;列级约束在字段后添加即可，表级约束则是 &lt;code&gt;[CONSTRAINT 约束名] 约束类型(字段名)&lt;/code&gt; , 外键约束有点特殊，是 &lt;code&gt;[CONSTRAINT 约束名] FOREIGN KEY(此表中的字段名) REFERENCES 主表(主表的主键)&lt;/code&gt;，外键表名通常是fk_当前表名_主表名。&lt;strong&gt;CONSTRAINT是别名的关键字，但是对主键起别名在mysql中是没有效果的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;外键的主表关联列必须是一个key(即必须是一个主键或唯一键【数据唯一性】)，插入数据时先插入主表再插入从表，删除数据时则先删除从表数据再删除主表数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果想只删除主表而不动从表，则需要使用级联删除或者级联置空。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;级联删除只需要在创建或修改约束时在后面加 &lt;code&gt;ON DELETE CASCADE&lt;/code&gt;,设置级联删除后，当删除主表的数据时会同时删除从表中外键值为主表key字段值的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;级联置空则是在创建或修改约束时在后面加 &lt;code&gt;ON DELETE SET NULL&lt;/code&gt;,意思是当主表数据被删除时，从表中所对应的外键值变为NULL&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ALTER TABLE 表名 ADD 约束(字段名)   //为某字段添加表级约束，列级约束只能使用MODIFY,表级约束两种方法都可以使用
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ALTER TABLE 表名 MODIFY COLUMN 列名 原字段类型 新约束    //修改列的约束,不加约束则是将原有约束全删除
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ALTER TABLE 表名 DROP 约束类型 约束的字段名   //删除约束，仅限于表级约束。列级约束使用MODIFY即可
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;列级约束语法都支持，但外键约束没有效果；表级约束默认约束(DEFAULT)和非空约束不支持，其他都支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AUTO_INCREMENT:自增长列约束，默认从1开始；如果想更改起始值，可以通过插入一行数据设置自增长列为你想要的起始值，如设置为10，后插入的则都会从10开始自增1。一个表最多只能有一个自增长列，且标识列的类型只能是数值型（int、float等）&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;事务&#34;&gt;事务&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事务由一个或多个SQL语句组成一个单元，在这个单元中，每个语句是相互依赖的。整个单元作为一个不可分割的整体，如果单元中的某条SQL语句执行失败或发生错误，整个单元将会进行回滚。所有受到影响的数据将返回到事务开始以前的状态；如果单元中的所有SQL语句均执行成功，则事务被顺利执行。&lt;/p&gt;
&lt;p&gt;**而在mysql中使用最多的存储引擎是innodb,myisam,memory。其中只有innodb支持事务。**通过 &lt;code&gt;SHOW ENGINES&lt;/code&gt; 可以查看当前数据库支持的存储引擎&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7.png&#34;
	width=&#34;1392&#34;
	height=&#34;425&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在mysql中想开启事务必须先设置自动提交功能为禁用，&lt;code&gt;set autocommit=0;&lt;/code&gt;，这个值是控制隐式事务的自动提交(insert、update、delete都属于隐式事务)。这个命令只针对当前会话有效。关闭后又会恢复开启状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8.png&#34;
	width=&#34;1401&#34;
	height=&#34;430&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;325&#34;
		data-flex-basis=&#34;781px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建事务后，更改的数据会先暂存在内存中，直到提交或回滚才会确定是否落盘；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;脏读发生的情况就是读到了另一个事务在内存中的数据。不可重复读则是再次读取时读到了另一个事务提交后的字段（两次查询结果不同）。幻读则是一个事务提交后，另一个事务进行更新列操作会包含前一个事务（如更新多行符合条件的列会把另一个事务新增的符合条件的列也进行更新）；通过更改事务级别避免这些问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mysql的默认级别为REPEATABLE READ 可重复读。可以避免脏读和不可重复读，幻读无法避免&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-9.png&#34;
	width=&#34;1306&#34;
	height=&#34;717&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-9_hufb7eac0e73148a978a324255550daf41_618431_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-9_hufb7eac0e73148a978a324255550daf41_618431_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select @@tx_isolation;&lt;/code&gt; 查看隔离级别；设置事务级别可以设置为只针对当前会话有效[set后加session]，设置全局[加global]，详细命令百度即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;delete删除的数据可以通过回滚，但是truncated删除的数据是无法回滚的，一定要注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4.png&#34;
	width=&#34;603&#34;
	height=&#34;409&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;353px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;视图&#34;&gt;视图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4.png&#34;
	width=&#34;603&#34;
	height=&#34;409&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;353px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;创建视图：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;create view 视图名 AS 复杂查询语句;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;使用
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select * from 视图名 where 条件语句
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;修改：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;create or replace view 视图名 AS 查询语句;     如果视图存在则修改，不存在则创建
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;alter view 视图名 AS 查询语句;     修改视图
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;查看视图:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DESC 视图名;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHOW CREATE VIEW 视图名;    查看视图的详细信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;删除视图:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DROP VIEW 视图1,视图2,...;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;视图就类似于字符串拼接，将一个复杂的查询语句包装成一个视图进行重复使用，后期使用时再加各种条件筛选出数据。&lt;/p&gt;
&lt;p&gt;视图可以实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重用sql语句&lt;/li&gt;
&lt;li&gt;简化复杂的sql操作，不必知道它的查询细节&lt;/li&gt;
&lt;li&gt;保护数据，提高安全性（对原始数据进行封装，与原始表相分离，查询视图返回的就只有创建视图时提供的字段，而不是所有字段，避免被人拖库等安全性问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视图也可以进行增删改查，语句和操作表相同，当用sql语句对视图进行更改时，会转换成对原表操作的sql语句。但如果mysql不能正确的确定被更新的基数据，则不允许更新(即视图中的某个字段在原表中并不存在，则不能进行更新)&lt;/p&gt;
&lt;p&gt;视图的可更新性和视图中查询的定义有关系，以下类型的视图是不能更新的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含某些关键字的sql语句: 分组函数、distinct、group by、having、union、union all&lt;/li&gt;
&lt;li&gt;常量视图&lt;/li&gt;
&lt;li&gt;select中包含子查询&lt;/li&gt;
&lt;li&gt;join&lt;/li&gt;
&lt;li&gt;创建一个视图，其中包含查询一个不能更新的视图&lt;/li&gt;
&lt;li&gt;where的子查询引用了from关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;只要是对原表的数据进行过处理的视图都是不可更新的&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;
&lt;p&gt;变量分为系统变量和自定义变量；系统变量中有全局变量和会话变量；全局变量更改后针对所有会话有效，但是重启mysql后就会失效，会恢复为配置文件中的默认值&lt;/p&gt;
&lt;h3 id=&#34;系统变量&#34;&gt;系统变量&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHOW GLOBAL|[SESSION] VARIABLES [LIKE &amp;#39;%ab%&amp;#39;];   查看系统 全局/会话变量,session不写默认也是查看会话变量，可以加like查看某些变量
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SELECT @@[global.|session]系统变量名   查看指定的系统变量的值，加global则是查看全局的，不加或加session则为会话的
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SET @@[global.|session]系统变量名 = 值		设置变量值，加不加global意义与上面一致
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;自定义变量&#34;&gt;自定义变量&lt;/h3&gt;
&lt;p&gt;用户自定义的用户变量，只针对当前会话有效&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;声明并初始化(也可以为原有值进行赋值)：	SET @用户变量名=值
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;查看自定义变量：SELECT @用户变量名
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;局部变量仅仅在定义它的begin  end中有效（类似于代码块），且必须放在begin end中的最前面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;声明： DECLARE 变量名 数据类型 [DEFAULT 值];    //局部变量必须声明且赋值，用default可以在声明时赋值
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;赋值： SET 变量名=值	//注意局部变量没有@
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;使用： SELECT 变量名
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;存储过程&#34;&gt;存储过程&lt;/h2&gt;
&lt;p&gt;存储过程和函数都相当于golang中的函数，用于封装一组sql语句集合。它可以提高代码的重用性，简化操作&lt;/p&gt;
&lt;p&gt;并且第一次使用后会进行编译，而编译过后执行速度会比普通的sql语句快。且他封装后只需要连接一次数据库，平常却是有多少sql语句连接多少次；这些优点提高了存储过程的效率&lt;/p&gt;
&lt;h3 id=&#34;创建存储过程&#34;&gt;创建存储过程&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DELIMITER $
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CREATE PROCEDURE 存储过程名(参数列表)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;BEGIN
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	存储过程体(一组合法的SQL语句);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;END $
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;要注意的是：&lt;/p&gt;
&lt;p&gt;参数列表包含三部分，参数模式   参数名   参数类型，如 IN stuName varchar(20)&lt;/p&gt;
&lt;p&gt;参数模式有IN、OUT、INOUT，IN表示该参数可以作为输入，也就是该参数需要调用方传入值；OUT则是该参数可以作为返回值[sql中没有return]，INOUT就是该参数需要传入值，同时也可以返回值；参数之间用逗号隔开&lt;/p&gt;
&lt;p&gt;如果存储过程体仅仅只有一句话，BEGIN EDN可以省略&lt;/p&gt;
&lt;p&gt;存储过程体中的每条SQL语句的结尾要求必须加分号，但是分号又会和普通语句的分号冲突，因此需要使用 &lt;code&gt;DELIMITER 结束标记&lt;/code&gt; 来给存储过程体的结尾分号起别名&lt;/p&gt;
&lt;h3 id=&#34;调用存储过程&#34;&gt;调用存储过程&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CALL 存储过程名(实参列表)创建时定义的结束标记 &lt;/code&gt; ,例如 &lt;code&gt;CALL myp1()$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;案例：创建存储过程，实现用户是否登录成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//创建
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DELIMITER $;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CREATE PROCEDURE login(IN username VARCHAR(20),IN password VARCHAR(20))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;BEGIN
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	DECLARE result INT DEFAULT 0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	SELECT count(*) INTO result 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	FROM admin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	WHERE admin.username=username
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	AND admin.password=password;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	SELECT IF(result&amp;gt;0,&amp;#39;成功&amp;#39;,&amp;#39;失败&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;END $
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//调用
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CALL login(&amp;#39;admin&amp;#39;,&amp;#39;123456&amp;#39;)$
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-2.png&#34;
	width=&#34;940&#34;
	height=&#34;264&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-2_huf7749bf2b5cb6d8df6c6217fdbaa1350_151996_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-2_huf7749bf2b5cb6d8df6c6217fdbaa1350_151996_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;356&#34;
		data-flex-basis=&#34;854px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3.png&#34;
	width=&#34;1098&#34;
	height=&#34;268&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;983px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;删除存储过程&#34;&gt;删除存储过程&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;drop procedure 存储过程名&lt;/code&gt; ，一次只能删除一个&lt;/p&gt;
&lt;p&gt;查看存储过程则是 &lt;code&gt;SHOW CREATE PROCEDURE 存储过程名;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;函数-1&#34;&gt;函数&lt;/h2&gt;
&lt;p&gt;它和存储过程很像，区别是存储过程有0个或多个返回值，而函数有且只能有1个返回值&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3.png&#34;
	width=&#34;1098&#34;
	height=&#34;268&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;983px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;调用语法：&lt;code&gt;SELECT 函数名(参数列表)&lt;/code&gt; ,执行函数中的所有语句，并且显示返回值&lt;/p&gt;
&lt;h2 id=&#34;流程控制&#34;&gt;流程控制&lt;/h2&gt;
&lt;h3 id=&#34;if语句case在之前的流程控制有&#34;&gt;if语句(case在之前的流程控制有)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;功能：实现多重分支，只能应用在BEGIN END中
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IF 条件1 THEN 语句1;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ELSEIF 条件2 THEN 语句2;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ELSE 语句n;]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;END IF
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;循环&#34;&gt;循环&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image.png&#34;
	width=&#34;400&#34;
	height=&#34;198&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image_hu81a2a592a5396b3d166999506891872b_51773_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image_hu81a2a592a5396b3d166999506891872b_51773_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;202&#34;
		data-flex-basis=&#34;484px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;索引&#34;&gt;索引&lt;/h2&gt;
&lt;p&gt;索引分为单值索引和复合索引；索引原理就是排序哈希表，就是排好序的快速查找数据结构。加速where和order by的查询&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;create index 索引名 on 表名(字段名,字段名...)     //为某字段建立索引，索引名通常取名为idx_表名_字段名;有多个字段时采用驼峰命名
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7.png&#34;
	width=&#34;1392&#34;
	height=&#34;425&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。经常性的修改和物理删除数据会导致数据不连贯，索引出现不准确的问题，因此建议使用软删除(delete_at)。且变化频繁的数据不太适合建索引，它会导致频繁更新索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存索引文件每次更新添加的索引列字段，都会调整因为更新所带来的键值变化后的索引信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3.png&#34;
	width=&#34;1098&#34;
	height=&#34;268&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;983px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一张表最好不要建立超过五个索引，且通常复合索引用的多。&lt;/p&gt;
&lt;p&gt;在创建表时，主键已经默认成为了一个唯一索引&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3.png&#34;
	width=&#34;1098&#34;
	height=&#34;268&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;983px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;哪些情况需要创建索引&#34;&gt;哪些情况需要创建索引&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7.png&#34;
	width=&#34;1392&#34;
	height=&#34;425&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;哪种情况不需要创建索引&#34;&gt;哪种情况不需要创建索引&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;对差异率和重复率不高的数据(重复且平均分配的值)进行创建索引没有太多意义。索引的选择性是指索引列中不同值的数目与表中记录数的比。比如有2000条数据，1980个不同的值，它选择性就是1980/2000=0.99。一个索引的选择性越接近于1，这个索引的效率就越高。&lt;/p&gt;
&lt;h2 id=&#34;explain查询执行计划&#34;&gt;EXPLAIN(查询执行计划)&lt;/h2&gt;
&lt;p&gt;使用explain关键字可以模拟优化器执行SQL查询语句，从而知道Mysql是如何处理SQL语句的。分析查询语句或表结构的性能瓶颈。语句就是explain+SQL语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它可以获取到：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表的读取顺序&lt;/li&gt;
&lt;li&gt;数据读取操作的操作类型&lt;/li&gt;
&lt;li&gt;哪些索引可以使用&lt;/li&gt;
&lt;li&gt;哪些索引被实际使用&lt;/li&gt;
&lt;li&gt;表之间的引用&lt;/li&gt;
&lt;li&gt;每张表有多少行被优化器查询&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-10.png&#34;
	width=&#34;953&#34;
	height=&#34;62&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-10_hu4aaf9e415ae784ecc422e183e32b7b9c_8051_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-10_hu4aaf9e415ae784ecc422e183e32b7b9c_8051_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1537&#34;
		data-flex-basis=&#34;3689px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;id&#34;&gt;id&lt;/h3&gt;
&lt;p&gt;它是select查询的序列号，包含一组数字，表示查询中执行select语句或操作表的顺序&lt;/p&gt;
&lt;p&gt;它有三种情况，id相同，id不同，id相同和不同都存在的情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3.png&#34;
	width=&#34;1098&#34;
	height=&#34;268&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;983px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8.png&#34;
	width=&#34;1401&#34;
	height=&#34;430&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;325&#34;
		data-flex-basis=&#34;781px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;select_type&#34;&gt;select_type&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4.png&#34;
	width=&#34;603&#34;
	height=&#34;409&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;353px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;table&#34;&gt;table&lt;/h3&gt;
&lt;p&gt;表示这一行的数据是关于哪张表的&lt;/p&gt;
&lt;h3 id=&#34;type&#34;&gt;type&lt;/h3&gt;
&lt;p&gt;访问类型排列&lt;/p&gt;
&lt;p&gt;从最好到最差依次是：&lt;code&gt;system &amp;gt; const &amp;gt; eq_ref &amp;gt; ref &amp;gt; range &amp;gt; index &amp;gt; ALL&lt;/code&gt;，一般来说，当数据量很大时，得保证查询至少达到range级别，最好能达到ref级别。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;possible_keys&#34;&gt;possible_keys&lt;/h3&gt;
&lt;p&gt;显示可能应用在这张表中的索引，一个或多个。&lt;/p&gt;
&lt;p&gt;查询涉及到的字段上若存在索引，则该索引将被列出，&lt;strong&gt;但不一定被查询实际应用&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;key&#34;&gt;key&lt;/h3&gt;
&lt;p&gt;实际使用的索引。如果为NULL，则没有使用索引&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询中若使用了覆盖索引(查询的字段和创建的索引字段相吻合)，则该索引仅出现在key列表中。即理论上不需要使用索引，但实际运行时发现有复合索引和查询的字段相吻合，则实际使用了这个索引&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;key_len&#34;&gt;key_len&lt;/h3&gt;
&lt;p&gt;表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。也变相的表示为条件字段的个数，如where后的条件字段类型是char(4),那它的长度则是utf-8  3字节*4 定长 +一个允许为NULL的字节，即为13&lt;/p&gt;
&lt;p&gt;key_len显示的值为索引字段的最大可能长度，&lt;strong&gt;并非实际使用长度&lt;/strong&gt;，即key_len是根据表定义计算而得，不是通过表内检索出的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;即同样的查询结果下，len越小越好&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ref&#34;&gt;ref&lt;/h3&gt;
&lt;p&gt;显示索引的哪一列被使用了，如果可能的话，最好是一个常数。&lt;strong&gt;说明哪些列或常量被用于查找索引列上的值(where后的判断条件值的类型，如t1=&amp;lsquo;ac&amp;rsquo;，那ref显示的就是const,因为&amp;rsquo;ac&amp;rsquo;是一个常量)。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;rows&#34;&gt;rows&lt;/h3&gt;
&lt;p&gt;根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数。&lt;strong&gt;即读了原表多少条数据查到目标数据(值越小越好)，不建索引时读取肯定会读全表，建立之后通过索引查询，这个rows就会减少许多&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;extra&#34;&gt;Extra&lt;/h3&gt;
&lt;p&gt;包含不适合在其他列中显示但十分重要的额外信息&lt;/p&gt;
&lt;p&gt;Using filesort:文件排序，说明MySQL会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。Mysql中无法利用索引完成的排序称为 &lt;strong&gt;文件排序&lt;/strong&gt;。如本身的索引是b1_b2_b3，select b1字段使用部分索引，而order by b3，跳过了b2，就会出现order无法使用索引，只能自己根据表进行排序，影响了性能&lt;/p&gt;
&lt;p&gt;Using temporary:使用了临时表保存中间结果，MySQL在对查询结果排序时使用了临时表。常见于排序order by和分组查询group by。&lt;/p&gt;
&lt;p&gt;Using index:表示相应的select 操作使用了覆盖索引（select 后的数据列只用从索引中就能够取得[部分满足也可以]，不必读取数据行，&lt;strong&gt;查询列被所建的索引覆盖&lt;/strong&gt;），避免了访问表的数据行，提高了效率；如果同时出现了using where，表明索引被用来执行索引键值查找；如果没出现using where，表明索引用来读取数据而非执行查找动作。&lt;/p&gt;
&lt;p&gt;Using where:表明使用了where过滤&lt;/p&gt;
&lt;p&gt;Using join buffer:使用了连接缓存&lt;/p&gt;
&lt;p&gt;Impossible where:where子句的值总是false ，不能用来获取任何元组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要注意的是如果在where后索引字段使用 in 或者 &amp;gt; &amp;lt;等范围会导致索引失效，如果要解决这个就尽量用等号，功能无法用等号实现，就绕过这个范围判断的字段来创建索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;尽量减少使用select &lt;em&gt;，这样只会使用到全表扫描，无法使用索引，降低性能&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当两表链接时，从表一定要加索引[根据条件创建索引]，&lt;strong&gt;因为关联起来时主表肯定数据全部都需要，而从表是根据条件[字段和主表某字段相等]来获取交集或者差集，因此给从表加索引可以加速从表的查询速度，最大化的优化查询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;永远是小表驱动大表&lt;/strong&gt;，如书籍类目表和书籍表，以类目表为主表。因为类目表数据更少，主表一般都是所有数据都会保存，如果把书籍表当成主表，数据量更大，io操作更多，性能就无法提升上来。&lt;/p&gt;
&lt;h2 id=&#34;索引失效的原因&#34;&gt;索引失效的原因&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;最佳左前缀法则：&lt;strong&gt;如果创建了复合索引，要遵守最佳左前缀法则。指的是where查询从索引的最左前列开始并且不跳过索引中的列&lt;/strong&gt;。因为一跳过或者只取之后字段就会和复合索引不匹配，部分使用如果只使用&lt;strong&gt;第一个之后的字段&lt;/strong&gt;也会导致索引失效。&lt;strong&gt;[带头大哥不能死，中间兄弟不能断]&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在索引列上做任何操作（计算、函数、[自动或手动的类型转换]）都会导致索引失效而转向全表扫描&lt;/li&gt;
&lt;li&gt;存储引擎不能使用索引中范围条件后右边的列**[范围之后全失效]。**&lt;strong&gt;即条件判断不是常量而是范围(如age&amp;gt;15)就会导致范围字段之后的索引失效(范围判断本身的索引字段age不会失效)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;尽量使用覆盖索引(只访问索引的查询[索引列和查询列一致])，减少select *&lt;/li&gt;
&lt;li&gt;MySQL在使用不等于(!= or &amp;lt;&amp;gt;)时会导致无法使用索引，转而变成全表扫描&lt;/li&gt;
&lt;li&gt;is null 和 is not null 也会导致索引失效&lt;/li&gt;
&lt;li&gt;like以通配符开头(&amp;rsquo;%abc&amp;hellip;&amp;rsquo;)时，MySQL的索引会失效，从而变成全表扫描ALL **[百分like加右边]，如果非要开头加通配符的话，select之后可以通过使用覆盖索引或者部分覆盖来解决索引失效的问题。**k%kk%不会导致失效，从另一个角度来看它都在右边&lt;/li&gt;
&lt;li&gt;字符串不加单引号会导致索引失效(发生了自动的类型转换，符合第2点)&lt;/li&gt;
&lt;li&gt;少用or，用它来连接时会导致索引失效&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;where条件后如果顺序不对，但字段对的上索引时，MySQL的优化器会自动排序。但是最好一致，避免MySQL再次翻译转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;查询优化&#34;&gt;查询优化&lt;/h2&gt;
&lt;h3 id=&#34;1永远小表驱动大表&#34;&gt;1.永远小表驱动大表&lt;/h3&gt;
&lt;p&gt;即小的数据集驱动大的数据集。如书籍类目表和书籍表，以类目表为主表。因为类目表数据更少，主表一般都是所有数据都会保存，如果把书籍表当成主表，数据量更大，io操作更多，性能就无法提升上来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3.png&#34;
	width=&#34;1098&#34;
	height=&#34;268&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;983px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理是exists会先查询外表数据，然后将其放到子查询中做条件验证 [遍历]，根据验证结果是TRUE还是FALSE还决定主查询的数据结果是否得以保留。因此B表多于A表数据时使用exists。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而in是先查询子查询的数据，再循环多次查询外表数据，因此B小于A时使用in&lt;/p&gt;
&lt;h3 id=&#34;order-by-关键字优化&#34;&gt;order by 关键字优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;order by 尽量使用index方式排序，避免出现using filesort 问题，且不要使用select *&lt;/li&gt;
&lt;li&gt;尽可能在索引列上完成排序操作，遵照索引的最佳左前缀原则。不用索引排序则会出现using filesort问题&lt;/li&gt;
&lt;li&gt;如果真的有using filesort问题出现，且无法进行SQL语句优化，修改配置文件，尝试提高 &lt;code&gt;sort_buffer_size&lt;/code&gt;或 &lt;code&gt;max_length_for_sort_data&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;索引用于查找和排序，所以如果where后有order时，它也会使用索引，如果条件和order是顺序的，如创建了索引c1_c2_c3，条件是 &lt;code&gt; where c1=x and c2=y order by c3&lt;/code&gt; ，虽然explain显示只有两个索引被使用，但c3也被使用到了，只是用在排序上没显示而已。&lt;code&gt;c1=x and c2&amp;gt;y order by c2,c3&lt;/code&gt;&lt;strong&gt;也可以使用索引，虽然c2断了，但是后续order by的c2接上了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但如果 &lt;code&gt;c1=x order by c3&lt;/code&gt;则会出现 using filesort 问题，因为索引断了；且 &lt;code&gt;c1=x order by c3,c2&lt;/code&gt;也会出现相同的问题，因为order by调换位置显示的结果是不同的，无法使用优化器自动调换。而 &lt;code&gt;c1=x order by c2,c1&lt;/code&gt; 不会出现这个问题，因为c1通过条件判断已经是个常量，优化器直接省略了它。&lt;code&gt;order by c1 asc,c2 desc&lt;/code&gt; 由于两个排序方式不同也会导致using filesort问题。&lt;/p&gt;
&lt;p&gt;因此order by 语句最好使用索引最左前列原则，或者where子句与order by 子句条件列组合起来满足索引最左前列也可以。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出现using filesort的情况分别有：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ASC DESC不一致&lt;/li&gt;
&lt;li&gt;丢失第一个索引字段&lt;/li&gt;
&lt;li&gt;丢失中间索引字段&lt;/li&gt;
&lt;li&gt;order by中出现了不是索引字段中的字段&lt;/li&gt;
&lt;li&gt;第一个字段在where子句那里并且使用了大于小于等或者in，且order by排序没有重新从第一个索引字段开始&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;group by也同理，分组之前必排序，且无法解决using filesort时也需要更改配置文件。where高于having，能写在where限定的条件就不要去having限定了。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mysql有两种排序方式，文件排序(using filesort)或扫描有序索引排列(using index)&lt;/li&gt;
&lt;li&gt;mysql能为排序和查询使用相同的索引，即如果排序和查询都用上索引则是最优解&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;慢查询日志&#34;&gt;慢查询日志&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7.png&#34;
	width=&#34;1392&#34;
	height=&#34;425&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show variables like &#39;%slow_query_log&#39;;&lt;/code&gt; 查看慢查询日志是否开启。&lt;code&gt;set global slow_query_log=1;&lt;/code&gt;开启&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show global variables like &#39;long_query_time%&#39;;&lt;/code&gt;查看运行时间，只有在大于这个值时才会记录。&lt;code&gt;set global long_query_time=3&lt;/code&gt; 设置运行时间阈值，设置完后马上生效，但是要重启会话才能查到新值&lt;/p&gt;
&lt;h3 id=&#34;mysqldumpslow-日志分析工具&#34;&gt;mysqldumpslow 日志分析工具&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3.png&#34;
	width=&#34;1098&#34;
	height=&#34;268&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-3_hu1cb52f05e99ccdd97ba57bad169de0b4_99295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;983px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8.png&#34;
	width=&#34;1401&#34;
	height=&#34;430&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;325&#34;
		data-flex-basis=&#34;781px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;show-profile&#34;&gt;show profile&lt;/h3&gt;
&lt;p&gt;它是MySQL提供可以用来分析当前会话中语句执行的资源消耗情况和生命周期各部分消耗情况。可以用于SQL的调优的测量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show variables like &#39;profiling&#39;&lt;/code&gt; 查看是否开启&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set profiling=on;&lt;/code&gt; 开启此功能&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show profiles;&lt;/code&gt; 查看最近执行的sql， &lt;code&gt;show profile cpu,block io for query Query_id&lt;/code&gt; 根据查出来的Query_id查看某条sql的完整生命周期每一步耗费的时间和资源&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7.png&#34;
	width=&#34;1392&#34;
	height=&#34;425&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见情况：只要有其中一个就必须得优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4.png&#34;
	width=&#34;603&#34;
	height=&#34;409&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;353px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;排查流程&#34;&gt;排查流程：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;收到故障消息&lt;/li&gt;
&lt;li&gt;开启慢查询日志，抓出执行慢的SQL&lt;/li&gt;
&lt;li&gt;EXPLAIN分析&lt;/li&gt;
&lt;li&gt;分析没找到问题，进一步分析，使用show profile&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;全局查询日志&#34;&gt;全局查询日志&lt;/h2&gt;
&lt;p&gt;功能类似于show profile，建议使用show profile&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4.png&#34;
	width=&#34;603&#34;
	height=&#34;409&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;353px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据库的锁&#34;&gt;数据库的锁&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;表锁&#34;&gt;表锁&lt;/h3&gt;
&lt;p&gt;偏向MyISAM存储引擎，开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率高，并发度最低&lt;/p&gt;
&lt;p&gt;创建表时在创建结尾添加engine=myisam; 即使用这个引擎。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show open tables; &lt;/code&gt;查看数据库有哪些表锁&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1.png&#34;
	width=&#34;1271&#34;
	height=&#34;295&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-1_hu1a5b2a6f75dcf6204e5e6ac0d225d66b_160677_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1034px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此表锁有必要设置为读锁，而写锁尽量少使用&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;读锁&#34;&gt;读锁&lt;/h4&gt;
&lt;p&gt;在一个会话中对某个表加读锁后 &lt;code&gt;lock table mytabs read&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;当前会话可以读这个表但不能读其他表，无法写，即只有解锁后才能进行其他操作。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他会话可以读这个表和其他表，&lt;strong&gt;写会阻塞，直到会话解锁。&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;写锁&#34;&gt;写锁&lt;/h4&gt;
&lt;p&gt;在一个会话中对某个表加读锁后 &lt;code&gt;lock table mytabs write&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当前会话可以读这个表和写这个表，但不能读写其他表。即只有解锁后才能进行其他表的操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其他会话可以读其他表，&lt;strong&gt;读和写这个表都会阻塞，直到会话解锁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简而言之，针对其他对话，读锁会阻塞写，但不会阻塞读。而写锁会把读和写都阻塞。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而加了锁的那个会话，为读锁时只能读当前表，不能写当前表和读写其他表;为写锁时能读和写当前表，不能读写其他表。都只有解锁后才能操作其他表。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;行锁&#34;&gt;行锁&lt;/h3&gt;
&lt;p&gt;偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度最高&lt;/p&gt;
&lt;p&gt;创建表时在创建结尾添加engine=innodb; 即使用这个引擎。可以不用，因为默认就是innodb引擎&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4.png&#34;
	width=&#34;603&#34;
	height=&#34;409&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-4_hu8c0558335fbc423e5a67d4f1cd34afe7_153199_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;353px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;innodb会对使用索引的列添加行锁，&lt;strong&gt;即sql语句带索引的时默认为行锁。如果没索引或者 索引失效[严重] 则会变成表锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行锁时，当前表是处在事务中的情况。其他表可以读但不能写同一行数据(读的以前数据，避免脏读)，会阻塞直到事务commit才能写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7.png&#34;
	width=&#34;1392&#34;
	height=&#34;425&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6.png&#34;
	width=&#34;1428&#34;
	height=&#34;586&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-6_hu2561854015bf049487337d3c9cd291c5_453435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;584px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8.png&#34;
	width=&#34;1401&#34;
	height=&#34;430&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-8_hu894b27991b677d72c86da47c17231ce5_191838_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;325&#34;
		data-flex-basis=&#34;781px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;分析用show profile即可看见lock的情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优化建议：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽可能让所有数据检索都通过索引来完成，避免无索引或索引失效让行锁升级为表锁。&lt;/li&gt;
&lt;li&gt;合理设计索引，尽量缩小锁的范围&lt;/li&gt;
&lt;li&gt;尽可能较少检索条件，避免间隙锁&lt;/li&gt;
&lt;li&gt;尽量控制事务大小，减少锁定资源量和时间长度&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;间隙锁&#34;&gt;间隙锁&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7.png&#34;
	width=&#34;1392&#34;
	height=&#34;425&#34;
	srcset=&#34;https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_480x0_resize_box_3.png 480w, https://xiaonuoz.github.io/p/mysql%E5%9F%BA%E7%A1%80/media/image-7_hub3284b6039275da0795b4e67bdbd56b9_225251_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此很多框架删除功能在底层也是update delete_at(软删除)，原因就是避免间隙锁的发生&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
